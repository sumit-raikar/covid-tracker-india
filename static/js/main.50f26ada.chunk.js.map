{"version":3,"sources":["utils/useWindowSize.js","constants.js","actions/index.js","actions/updateLogAction.js","actions/indiaCovidCountAction.js","actions/worldStatasticsAction.js","actions/statePageAction.js","components/slideText.js","containers/daily-log/updateLogContainer.js","containers/daily-log/quickLogContainer.js","containers/daily-log/logMainContainer.js","common-components/table/tableHeader.js","common-components/table/tableBody.js","common-components/table/table.js","containers/india-covid-count/ICCTable.js","containers/india-covid-status/ICSContainer.js","common-components/cards/top3Card.js","common-components/compare-values/index.js","containers/india-top-3-state/index.js","containers/home-page/homePageContainer.js","App.js","components/world-data/index.js","containers/world/index.js","components/Header/index.js","containers/india-state-status/stateTotalCount.js","common-components/bar-graph/index.js","containers/india-state-status/stateTable.js","containers/india-state-status/districtGraph.js","containers/india-state-status/index.js","reducers/updateLogReducer.js","reducers/indiaCovidCountReducer.js","common-components/random-number/index.js","reducers/worldStatasticsReducer.js","reducers/stateTableReducer.js","reducers/index.js","storeSetUp.js","serviceWorker.js","index.js"],"names":["UseWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","updateLog","stateCovidCount","worldStats","statePageVariable","actions","updateLogActions","getCovidUpdateLog","dispatch","a","type","fetch","response","json","res","payload","getStateCovidCountActions","getStateCovidCount","responseStatewise","resStatewise","extraData","sortCovidCount","data","sortOrder","sortDistrictCovidCount","worldStatasticsAction","getAllCountryStatastics","headers","sortStatastics","console","log","searchStatastics","searchText","stateDataActions","getDistrictCovidData","getDistrictTimeseries","district","statecode","SlideText","textToShow","className","UpdateLogContainer","textLogToDisplay","setTextLogToDisplay","updateLogs","useSelector","state","updateLogReducer","useDispatch","length","isCancelled","i","setTimeout","date_ob","timestamp","year","getFullYear","month","getMonth","slice","date","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","update","concat","QuickLogContainer","LogMainController","size","TableHeading","headings","action","sortState","setSortState","newSortState","forEach","heading","push","map","_heading","headingIndex","key","onClick","sorting","index","ref","onHeadingClick","label","TableBody","subHeadings","subAction","onlinkClick","expandedRows","setExpandedRows","renderItem","_row","rowCell","itemRows","row","rowClickEnable","currentExpandedRows","newExpandedRows","includes","filter","id","handleRowClick","toString","tableHeadData","deltaValue","oneMValue","route","e","stopPropagation","to","colSpan","districtWiseData","allItemRows","rowData","perItemRows","returnTableBody","Table","props","tempHeading","boundCovidCountActionCreator","boundCovidCountSubActionCreator","ICCTable","indiaCovidTableData","indiaCovidCountReducer","stateWiseCovidCount","bindActionCreators","IndiaCovidStatus","indiaCovidStatus","confirmed","active","recovered","deceased","Top3Card","description","tableHeadings","tableData","compareValues","order","b","hasOwnProperty","tempA","isNaN","Number","toUpperCase","tempB","comparision","newsHeadings","desc","tableHeading","criteria","getTop3DistrictData","stateDataCollected","dt","cityState","sort","cases","deltaconfirmed","totalRecovered","recoveredToday","deltarecovered","Top3State","setTableHeadings","isLoading","newTableData","Fragment","news","HomePageContainer","App","WorldData","React","memo","prevProps","nextProps","boundWorldActionCreator","World","setSearchText","worldStatsReducer","value","placeholder","onChange","target","Header","StateTotalCount","stateData","lastupdatedtime","deltadeceased","BarCharts","XDataKey","barDataKey","color","margin","top","right","left","bottom","strokeDasharray","dataKey","verticalAlign","wrapperStyle","lineHeight","y","stroke","fill","graphTypes","StateTable","stateTimeSeriesData","graph","stateDailyCases","DistrictGraph","IndiaStateCovidstatus","evalStateTotalCount","setEvalStateTotalCount","stateVal","useParams","stateTableReducer","stateTableData","isLoadingTimeseriesData","isLoadingTimeSeries","stateTimeseriesData","stateCode","initialState","error","combineText","allText","newSubstring","transformLogs","logs","ts","logArray","split","time","Date","reduce","randomId","min","max","Math","random","statewiseDistrictData","constructStateWiseData","districtData","tempDistrictData","newDistrict","transformIndianCovidCount","covidStateDetails","tempToalIndiaCovidCount","statewise","distWise","deaths","deltadeaths","routeLink","indiaCovidCount","JSON","parse","stringify","tempSortCovidCount","worldStateForSearch","transformStats","stats","country","total","death","tests","population","lastUpdated","deltaactive","new","deltadeath","sortWorldStats","worldData","searchWorldStats","newWorldStats","indexOf","tempWorldState","tempSortWorldStats","tempSearchWorldStats","districtDailyCases","transformTimeSeriesData","timeseriesData","deepCopyTimeseriesData","tempStateDailyChanges","stateDailyChanges","property","tested","tempDistrictDailyChanges","districtDailyChanges","districtDaily","districtDate","name","dailyChanges","errorTimeSeries","rootReducer","combineReducers","middleware","applyMiddleware","thunk","logger","store","createStore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","exact","path","from","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.50f26ada.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst UseWindowSize = () => {\r\n    const isClient = typeof window === 'object';\r\n\r\n    const getSize = () => {\r\n        return {\r\n            width: isClient ? window.innerWidth : undefined,\r\n            height: isClient ? window.innerHeight : undefined\r\n        }\r\n    }\r\n\r\n    const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n    useEffect(() => {\r\n        if (!isClient) {\r\n            return false;\r\n        }\r\n        const handleResize = () => {\r\n            setWindowSize(getSize());\r\n        }\r\n        \r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, [])\r\n\r\n    return windowSize;\r\n}\r\n\r\nexport default UseWindowSize;","export const updateLog = {\r\n    request: 'UPDATE_LOG_REQUEST',\r\n    success: 'UPDATE_LOG_SUCCESS',\r\n    failure: 'UPDATE_LOG_FAILURE'\r\n};\r\n\r\nexport const stateCovidCount = {\r\n    request: 'GET_COVID_COUNT_REQUEST',\r\n    success: 'GET_COVID_COUNT_SUCCESS',\r\n    failure: 'GET_COVID_COUNT_FAILURE',\r\n    sortSuccess: 'SORT_COVID_COUNT_SUCCESS',\r\n    sortDistSuccess: 'SORT_DISTRICT_COVID_COUNT_SUCCESS'\r\n}\r\n\r\nexport const worldStats = {\r\n    request: 'GET_COVID_WORLD_STATS_REQUEST',\r\n    success: 'GET_COVID_WORLD_STATS_SUCCESS',\r\n    failure: 'GET_COVID_WORLD_STATS_FAILURE',\r\n    sortRequest: 'SORT_STATASTICS_REQUEST',\r\n    sortSuccess: 'SORT_STATASTICS_SUCCESS',\r\n    sortFailure: 'SORT_STATASTICS_FAILURE',\r\n    searchSuccess: 'SEARCH_STATASTICS_SUCCESS',\r\n}\r\n\r\nexport const statePageVariable = {\r\n    request: 'STATE_DATA_REQUEST',\r\n    success: 'STATE_DATA_SUCCESS',\r\n    failure: 'STATE_DATA_FAILURE',\r\n    timeseriesRequest: 'TIME_SERIES_DATA_REQUEST',\r\n    timeseriesSuccess: 'TIME_SERIES_DATA_SUCCESS',\r\n    timeseriesFailure: 'TIME_SERIES_DATA_FAILURE'\r\n};\r\n","import updateLogActions from './updateLogAction';\r\nimport getStateCovidCountActions from './indiaCovidCountAction';\r\nimport worldStatasticsAction from './worldStatasticsAction';\r\nimport stateDataActions from './statePageAction';\r\n\r\nconst actions = {\r\n    updateLogActions,\r\n    getStateCovidCountActions,\r\n    worldStatasticsAction,\r\n    stateDataActions\r\n}\r\n\r\nexport default actions;","import { updateLog } from '../constants';\r\n\r\nconst getCovidUpdateLog = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: updateLog.request });\r\n        try {\r\n            const response = await fetch('https://api.covid19india.org/updatelog/log.json');\r\n            const res = await response.json();\r\n            dispatch({ type: updateLog.success, payload: res });\r\n        } catch (e) {\r\n            dispatch({ type: updateLog.failure, payload: e });\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    getCovidUpdateLog\r\n};","import { stateCovidCount } from '../constants';\r\n\r\nconst getStateCovidCount = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: stateCovidCount.request });\r\n        try {\r\n            const response = await fetch('https://api.covid19india.org/data.json');\r\n            const responseStatewise = await fetch('https://api.covid19india.org/state_district_wise.json');\r\n            const res = await response.json();\r\n            const resStatewise = await responseStatewise.json();\r\n            dispatch({ type: stateCovidCount.success, payload: res, extraData: resStatewise });\r\n        } catch (e) {\r\n            dispatch({ type: stateCovidCount.failure, payload: e });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst sortCovidCount = (data, sortOrder) => {\r\n    return {\r\n        type: stateCovidCount.sortSuccess,\r\n        payload: { data, sortOrder }\r\n    }\r\n}\r\n\r\nconst sortDistrictCovidCount = (data, sortOrder) => {\r\n    return {\r\n        type: stateCovidCount.sortDistSuccess,\r\n        payload: { data, sortOrder }\r\n    }\r\n}\r\n\r\nexport default {\r\n    getStateCovidCount,\r\n    sortCovidCount,\r\n    sortDistrictCovidCount\r\n};","import { worldStats } from '../constants';\r\n\r\nconst getAllCountryStatastics = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: worldStats.request });\r\n        try {\r\n            const response = await fetch('https://covid-193.p.rapidapi.com/statistics', {\r\n                headers: {\r\n                    \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n                    \"x-rapidapi-key\": \"72f8bce3f5msh3ff2719a55f3a4ep18cdb0jsne780cae29258\",\r\n                    \"useQueryString\": true\r\n                }\r\n            });\r\n            const res = await response.json();\r\n            dispatch({ type: worldStats.success, payload: res });\r\n        } catch (e) {\r\n            dispatch({ type: worldStats.failure, payload: e });\r\n        }\r\n    }\r\n}\r\n\r\nconst sortStatastics = (data, sortOrder) => {\r\n    console.log(data, sortOrder);\r\n    return {\r\n        type: worldStats.sortSuccess,\r\n        payload: { data, sortOrder }\r\n    }\r\n}\r\n\r\nconst searchStatastics = (searchText) => {\r\n    console.log(searchText);\r\n    return {\r\n        type: worldStats.searchSuccess,\r\n        payload: searchText\r\n    }\r\n}\r\n\r\nexport default {\r\n    getAllCountryStatastics,\r\n    sortStatastics,\r\n    searchStatastics\r\n};","import { statePageVariable } from '../constants';\r\n\r\nconst getDistrictCovidData = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: statePageVariable.request });\r\n        try {\r\n            const response = await fetch('https://api.covid19india.org/data.json');\r\n            const responseStatewise = await fetch('https://api.covid19india.org/state_district_wise.json');\r\n            const resStatewise = await responseStatewise.json();\r\n            const res = await response.json();\r\n            dispatch({ type: statePageVariable.success, payload: res, extraData: resStatewise });\r\n        } catch (e) {\r\n            dispatch({ type: statePageVariable.failure, payload: e });\r\n        }\r\n    }\r\n}\r\n\r\nconst getDistrictTimeseries = (district) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: statePageVariable.timeseriesRequest });\r\n        try {\r\n            const response = await fetch(`https://api.covid19india.org/v4/min/timeseries-${district}.min.json`);\r\n            const res = await response.json();\r\n            dispatch({ type: statePageVariable.timeseriesSuccess, payload: res, statecode: district });\r\n        } catch (e) {\r\n            dispatch({ type: statePageVariable.timeseriesFailure, payload: e });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default { getDistrictCovidData, getDistrictTimeseries };","import React from 'react';\r\nimport '../scss/slideText.scss';\r\n\r\nconst SlideText = ({ textToShow }) => {\r\n    return (\r\n        <div className=\"slide-left\">\r\n            <p>{textToShow}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SlideText;","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../actions';\r\nimport './updateLog.scss';\r\nimport SlideText from '../../components/slideText';\r\n\r\nconst UpdateLogContainer = () => {\r\n    const [textLogToDisplay, setTextLogToDisplay] = useState();\r\n    const updateLogs = useSelector(state => state.updateLogReducer.updateLogs);\r\n    const dispatch = useDispatch();\r\n\r\n    // This Efect is used to fetch daily indian logs. This function runs only once\r\n    useEffect(() => {\r\n        if (updateLogs.length === 0) {\r\n            dispatch(actions.updateLogActions.getCovidUpdateLog());\r\n        }\r\n    }, []);\r\n\r\n    // This runs whenever updateLogs.length changes.\r\n    useEffect(() => {\r\n        let isCancelled = false;\r\n        for (let i = 0; i < updateLogs.length; i += 1) {\r\n            // eslint-disable-next-line no-loop-func\r\n            setTimeout(() => {\r\n                const date_ob = updateLogs[i].timestamp;\r\n                // year as 4 digits (YYYY)\r\n                const year = date_ob.getFullYear();\r\n\r\n                // month as 2 digits (MM)\r\n                const month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\r\n\r\n                // date as 2 digits (DD)\r\n                const date = (\"0\" + date_ob.getDate()).slice(-2);\r\n\r\n                // hours as 2 digits (hh)\r\n                const hours = (\"0\" + date_ob.getHours()).slice(-2);\r\n\r\n                // minutes as 2 digits (mm)\r\n                const minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\r\n\r\n                // seconds as 2 digits (ss)\r\n                const seconds = (\"0\" + date_ob.getSeconds()).slice(-2);\r\n                if (!isCancelled) { // It the component is unmounted the update process must be stoped, here when component unmounts isCancelled is sset to true and this logic stops updation of state.  \r\n                    setTextLogToDisplay(updateLogs[i].update.concat(' DateTime ', year, '-', month, '-', date, ' ', hours, ':', minutes, ':', seconds));\r\n                }\r\n            }, 3000 * i)\r\n        }\r\n        return () => {\r\n            isCancelled = true;\r\n        };\r\n    }, [updateLogs.length]);\r\n\r\n    return (\r\n        <div className=\"update-log-container\">\r\n            <SlideText textToShow={textLogToDisplay} />\r\n            {updateLogs.length === 0 && <div>Loading...</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateLogContainer;","import React, { useEffect, useState } from 'react';\r\nimport './quickLogContainer.scss';\r\n\r\nconst QuickLogContainer = () => {\r\n    return (\r\n        <div className=\"quick-log-container\">\r\n            <div className=\"quickLog\">\r\n                Quick Update\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuickLogContainer;","import React from 'react';\r\nimport UseWindowSize from '../../utils/useWindowSize';\r\nimport UpdateLogContainer from './updateLogContainer';\r\nimport QuickLogContainer from './quickLogContainer';\r\n\r\nconst LogMainController = () => {\r\n    const size = UseWindowSize();\r\n    return (\r\n        <div>\r\n            {size.width >= '900' && <UpdateLogContainer />}\r\n            {size.width <= '900' && <QuickLogContainer />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogMainController;","import React, { useState, useEffect } from 'react';\r\n\r\nconst TableHeading = ({ headings, action }) => {\r\n    const [sortState, setSortState] = useState([]);\r\n    useEffect(() => {\r\n        let newSortState = [];\r\n        headings.forEach(heading => {\r\n            newSortState.push('asc')\r\n        });\r\n        setSortState(newSortState);\r\n    }, [headings.length]);\r\n\r\n    const onHeadingClick = (heading, headingIndex) => {\r\n        console.log(heading, sortState[headingIndex]);\r\n        // Change asc to desc in setstate\r\n        console.log(sortState);\r\n        let newSortState = [];\r\n        sortState.forEach((data, index) => {\r\n            if (index === headingIndex) {\r\n                newSortState.push(data === 'asc' ? 'desc' : 'asc');\r\n            }\r\n            newSortState.push('asc');\r\n        })\r\n        setSortState(newSortState);\r\n        action(heading.ref, sortState[headingIndex]);\r\n    }\r\n\r\n    const renderHeadings = (_heading, headingIndex) => {\r\n        return (\r\n            <th\r\n                key={`heading-${headingIndex}`}\r\n                onClick={() => {\r\n                    if (_heading.sorting) {\r\n                        onHeadingClick(_heading, headingIndex)\r\n                    }\r\n                }\r\n                }\r\n            >\r\n                {_heading.label}\r\n                {_heading.sorting && <span className='sort-order'>{sortState[headingIndex]}</span>}\r\n            </th>\r\n        )\r\n    }\r\n    return (\r\n        <thead>\r\n            <tr>{headings.map(renderHeadings)}</tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nexport default TableHeading;","import React, { useState } from 'react';\r\nimport {\r\n    Link,\r\n} from \"react-router-dom\";\r\nimport Table from './table';\r\nconst TableBody = ({ data, headings, subHeadings, onlinkClick, subAction }) => {\r\n    const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n    const handleRowClick = (row) => {\r\n        if (row.rowClickEnable) {\r\n            const currentExpandedRows = expandedRows;\r\n            const isRowCurrentlyExpanded = expandedRows.includes(row.statecode);\r\n            const newExpandedRows = isRowCurrentlyExpanded ? currentExpandedRows.filter(id => id !== row.statecode) : currentExpandedRows.concat(row.statecode);\r\n\r\n            setExpandedRows(newExpandedRows);\r\n        }\r\n    }\r\n\r\n    const returnTableBody = () => {\r\n        let allItemRows = [];\r\n        if (data.length === 0) {\r\n            return;\r\n        }\r\n        data.forEach((rowData, index) => {\r\n            const perItemRows = renderItem(rowData, index);\r\n            allItemRows = allItemRows.concat(perItemRows);\r\n        })\r\n        return allItemRows;\r\n    }\r\n    const renderItem = (_row, rowCell) => {\r\n\r\n        const itemRows = [\r\n            <tr onClick={() => { handleRowClick(_row) }} key={_row.key + rowCell.toString()}>\r\n\r\n                {headings.map((tableHeadData, index) => {\r\n                    const deltaValue = `delta${tableHeadData.ref}`;\r\n                    const oneMValue = `1m${tableHeadData.ref}`;\r\n                    return <td key={_row.key + index.toString()}>\r\n                        <div className={tableHeadData.route ? `table-body-cell-container table-body-right-content` : 'table-body-right-content'}>\r\n                            <div>\r\n                                <div>{_row[deltaValue]}</div>\r\n                                <div>{_row[tableHeadData.ref]}</div>\r\n                                {_row[oneMValue] && <div>1M-POP, {_row[oneMValue]}</div>}\r\n                            </div>\r\n                            {tableHeadData.route && <div>\r\n                                <div onClick={(e) => { e.stopPropagation() }}>{tableHeadData.route && <Link to={tableHeadData.route ? _row['routeLink'] + `/${_row.statecode}` : ''}>Open new</Link>}</div>\r\n                            </div>}\r\n                        </div>\r\n                    </td>\r\n                })}\r\n            </tr>\r\n        ];\r\n\r\n        if (expandedRows.includes(_row.statecode)) {\r\n            itemRows.push(\r\n                <tr key={\"row-expanded-\" + _row.statecode}>\r\n                    <td colSpan={headings.length} className='table-expand-cell'>\r\n                        <Table headings={subHeadings} data={_row.districtWiseData} action={subAction} />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return itemRows;\r\n\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {returnTableBody()}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nexport default TableBody;","import React from 'react';\r\nimport TableHeading from './tableHeader';\r\nimport './table.scss';\r\nimport TableBody from './tableBody';\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <table>\r\n            <TableHeading headings={props.headings} action={props.action} />\r\n            <TableBody headings={props.headings} data={props.data} subHeadings={props.subHeadings} subAction={props.subAction} />\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport actions from '../../actions';\r\nimport Table from '../../common-components/table/table';\r\n\r\nconst tempHeading = [\r\n    { ref: 'state', label: 'State', route: true, sorting: true },\r\n    { ref: 'confirmed', label: 'Confirmed', sorting: true },\r\n    { ref: 'active', label: 'Active', sorting: true },\r\n    { ref: 'recovered', label: 'Recovered', sorting: true },\r\n    { ref: 'deceased', label: 'Deceased', sorting: true }\r\n]\r\n\r\nconst subHeadings = [\r\n    { ref: 'district', label: 'District', sorting: true },\r\n    { ref: 'confirmed', label: 'Confirmed', sorting: true },\r\n    { ref: 'active', label: 'Active', sorting: true },\r\n    { ref: 'recovered', label: 'Recovered', sorting: true },\r\n    { ref: 'deceased', label: 'Deceased', sorting: true }\r\n]\r\nlet boundCovidCountActionCreator = null;\r\nlet boundCovidCountSubActionCreator = null;\r\nfunction ICCTable() {\r\n\r\n    const indiaCovidTableData = useSelector(state => state.indiaCovidCountReducer.stateWiseCovidCount);\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log('get india covid count');\r\n        if (indiaCovidTableData.length === 0) {\r\n            dispatch(actions.getStateCovidCountActions.getStateCovidCount())\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('get india covid count');\r\n    }, []);\r\n    if (boundCovidCountActionCreator === null) {\r\n        boundCovidCountActionCreator = bindActionCreators(actions.getStateCovidCountActions.sortCovidCount, dispatch);\r\n    }\r\n    console.log(boundCovidCountActionCreator);\r\n    if (boundCovidCountSubActionCreator === null) {\r\n        boundCovidCountSubActionCreator = bindActionCreators(actions.getStateCovidCountActions.sortDistrictCovidCount, dispatch);\r\n    }\r\n    console.log(boundCovidCountSubActionCreator);\r\n    return (\r\n        <div>\r\n            <Table headings={tempHeading} data={indiaCovidTableData} subHeadings={subHeadings} action={boundCovidCountActionCreator} subAction={boundCovidCountSubActionCreator} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ICCTable;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './ics.scss';\r\n\r\nconst IndiaCovidStatus = () => {\r\n    const indiaCovidTableData = useSelector(state => state.indiaCovidCountReducer.stateWiseCovidCount);\r\n    let indiaCovidStatus = null;\r\n    if (indiaCovidTableData.length >= 1) {\r\n        indiaCovidStatus = indiaCovidTableData.filter(state => state.state === 'Total' && state.statecode === 'TT');\r\n    }\r\n\r\n    return (\r\n        indiaCovidStatus === null ? (<div>Loading total india covid status...</div>) :\r\n            (<div className=\"india-covid-status-container\">\r\n                <div className='india-covid-status'>\r\n                    <div className='status-grid-container'>\r\n                        <div className='status-label'>\r\n                            Confirmed\r\n                        </div>\r\n                        <div className='status-center'>\r\n                            {indiaCovidStatus[0].confirmed}\r\n                        </div>\r\n                    </div>\r\n                    <div className='status-grid-container'>\r\n                        <div className='status-label'>\r\n                            Active\r\n                        </div>\r\n                        <div className='status-center'>\r\n                            {indiaCovidStatus[0].active}\r\n                        </div>\r\n                    </div>\r\n                    <div className='status-grid-container'>\r\n                        <div className='status-label'>\r\n                            Recovered\r\n                        </div>\r\n                        <div className='status-center'>\r\n                            {indiaCovidStatus[0].recovered}\r\n                        </div>\r\n                    </div>\r\n                    <div className='status-grid-container'>\r\n                        <div className='status-label'>\r\n                            Deseased\r\n                        </div>\r\n                        <div className='status-center'>\r\n                            {indiaCovidStatus[0].deceased}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n    );\r\n}\r\n\r\nexport default IndiaCovidStatus;","import React from 'react';\r\nimport Table from '../table/table';\r\nimport './top3cards.scss';\r\n\r\nconst Top3Card = ({ description, tableHeadings, tableData }) => {\r\n    return (\r\n        <div className='top-3-card-container'>\r\n            <div className='label'>\r\n                {description}\r\n            </div>\r\n            <div>\r\n                <Table headings={tableHeadings} data={tableData} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Top3Card;","const compareValues = (key, order = 'asc') => {\r\n    return (a, b) => {\r\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n            // property doesn't exist on either object\r\n            return 0;\r\n        }\r\n        const tempA = isNaN(Number(a[key])) ? a[key].toUpperCase() : Number(a[key]);\r\n        const tempB = isNaN(Number(b[key])) ? b[key].toUpperCase() : Number(b[key]);\r\n        let comparision = 0;\r\n        if (tempA > tempB) {\r\n            comparision = 1;\r\n        } else if (tempA < tempB) {\r\n            comparision = -1;\r\n        }\r\n        return (\r\n            (order === 'desc') ? (comparision * -1) : comparision\r\n        )\r\n    }\r\n}\r\n\r\nexport default compareValues;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Top3Card from '../../common-components/cards/top3Card';\r\nimport compareValues from '../../common-components/compare-values';\r\nimport './top-3-state.scss';\r\n\r\nconst newsHeadings = [\r\n    {\r\n        desc: 'Top 3 cities with highest ACTIVE covid case',\r\n        tableHeading: [\r\n            { ref: 'cityState', label: 'City,State' },\r\n            { ref: 'active', label: 'Active' }\r\n        ],\r\n        tableData: [],\r\n        criteria: 'active',\r\n    },\r\n    {\r\n        desc: 'Top 3 cities with highest covid case FOUND TODAY',\r\n        tableHeading: [\r\n            { ref: 'cityState', label: 'City,State' },\r\n            { ref: 'cases', label: 'Cases' }\r\n        ],\r\n        tableData: [],\r\n        criteria: 'highest'\r\n    },\r\n    {\r\n        desc: 'Top 3 cities with highest covid case RECOVERED',\r\n        tableHeading: [\r\n            { ref: 'cityState', label: 'City,State' },\r\n            { ref: 'totalRecovered', label: 'Total Recovered' }\r\n        ],\r\n        tableData: [],\r\n        criteria: 'totalRecovered'\r\n    },\r\n    {\r\n        desc: 'Top 3 cities with highest covid case RECOVERED TODAY',\r\n        tableHeading: [\r\n            { ref: 'cityState', label: 'City,State' },\r\n            { ref: 'recoveredToday', label: 'Recovered Today' }\r\n        ],\r\n        tableData: [],\r\n        criteria: 'recoveredToday'\r\n    }\r\n]\r\n\r\nfunction getTop3DistrictData(indiaCovidTableData, criteria) {\r\n\r\n    if (criteria === 'active') {\r\n        const stateDataCollected = [];\r\n        indiaCovidTableData.forEach((data) => {\r\n            if (data.hasOwnProperty('districtWiseData')) {\r\n                data.districtWiseData.forEach(dt => {\r\n                    stateDataCollected.push({\r\n                        cityState: `${dt.district}, ${data.state}`,\r\n                        active: dt.active\r\n                    })\r\n                })\r\n            }\r\n        });\r\n        stateDataCollected.sort(compareValues('active', 'desc'));\r\n        return stateDataCollected.slice(0, 3);\r\n    } else if (criteria === 'highest') {\r\n        const stateDataCollected = [];\r\n        indiaCovidTableData.forEach((data) => {\r\n            if (data.hasOwnProperty('districtWiseData')) {\r\n                data.districtWiseData.forEach(dt => {\r\n                    stateDataCollected.push({\r\n                        cityState: `${dt.district}, ${data.state}`,\r\n                        cases: dt.deltaconfirmed\r\n                    })\r\n                })\r\n            }\r\n        });\r\n        console.log(stateDataCollected);\r\n        stateDataCollected.sort(compareValues('cases', 'desc'));\r\n        return stateDataCollected.slice(0, 3);\r\n    } else if (criteria === 'totalRecovered') {\r\n        const stateDataCollected = [];\r\n        indiaCovidTableData.forEach((data) => {\r\n            if (data.hasOwnProperty('districtWiseData')) {\r\n                data.districtWiseData.forEach(dt => {\r\n                    stateDataCollected.push({\r\n                        cityState: `${dt.district}, ${data.state}`,\r\n                        totalRecovered: dt.recovered\r\n                    })\r\n                })\r\n            }\r\n        });\r\n        console.log(stateDataCollected);\r\n        stateDataCollected.sort(compareValues('totalRecovered', 'desc'));\r\n        return stateDataCollected.slice(0, 3);\r\n    } else if (criteria === 'recoveredToday') {\r\n        const stateDataCollected = [];\r\n        indiaCovidTableData.forEach((data) => {\r\n            if (data.hasOwnProperty('districtWiseData')) {\r\n                data.districtWiseData.forEach(dt => {\r\n                    stateDataCollected.push({\r\n                        cityState: `${dt.district}, ${data.state}`,\r\n                        recoveredToday: dt.deltarecovered\r\n                    })\r\n                })\r\n            }\r\n        });\r\n        console.log(stateDataCollected);\r\n        stateDataCollected.sort(compareValues('recoveredToday', 'desc'));\r\n        return stateDataCollected.slice(0, 3);\r\n    }\r\n\r\n}\r\n\r\nfunction Top3State() {\r\n    const [tableHeadings, setTableHeadings] = useState(newsHeadings);\r\n    const indiaCovidTableData = useSelector(state => state.indiaCovidCountReducer.stateWiseCovidCount);\r\n    const isLoading = useSelector(state => state.indiaCovidCountReducer.isLoading);\r\n    useEffect(() => {\r\n        let newTableData = [];\r\n        newTableData = tableHeadings.map((heading) => {\r\n            return {\r\n                ...heading,\r\n                tableData: getTop3DistrictData(indiaCovidTableData, heading.criteria)\r\n            }\r\n        })\r\n        setTableHeadings(newTableData)\r\n    }, [indiaCovidTableData.length]);\r\n    return (\r\n        <div className='top-3-state-container'>\r\n            {isLoading && <div>\r\n                Loading short news...\r\n            </div>}\r\n            {!isLoading && <React.Fragment>\r\n                {\r\n                    tableHeadings.map((news, index) => {\r\n                        return <Top3Card key={index} description={news.desc} tableHeadings={news.tableHeading} tableData={news.tableData} />\r\n                    })\r\n                }\r\n            </React.Fragment>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Top3State;","import React, { useEffect } from 'react';\r\nimport LogMainController from '../daily-log/logMainContainer';\r\nimport ICCTable from '../india-covid-count/ICCTable';\r\nimport IndiaCovidStatus from '../india-covid-status/ICSContainer';\r\nimport Table from '../../common-components/table/table';\r\nimport Top3State from '../india-top-3-state';\r\nimport './homePageContainer.scss';\r\n\r\nfunction HomePageContainer() {\r\n    return (\r\n        <div className='home-page-container'>\r\n            <LogMainController />\r\n            <IndiaCovidStatus />\r\n            <div className='icc-table-top-3-state'>\r\n                <div className='icc-table'>\r\n                    <ICCTable />\r\n                </div>\r\n                <div>\r\n                    <Top3State />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePageContainer;","import React from 'react';\r\nimport HomePageContainer from './containers/home-page/homePageContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <HomePageContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useEffect } from 'react';\r\nimport Table from '../../common-components/table/table';\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n    return false;\r\n}\r\n\r\nconst WorldData = React.memo(({ headings, data, action }) => {\r\n    return (\r\n        <div>\r\n            <Table headings={headings} data={data} action={action} />\r\n        </div>\r\n    );\r\n}, areEqual);\r\n\r\nexport default WorldData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport WorldData from '../../components/world-data';\r\nimport actions from '../../actions';\r\n\r\nimport './world.scss';\r\n\r\nconst tableHeadings = [\r\n    { ref: 'country', label: 'Country', sorting: true },\r\n    { ref: 'total', label: 'Total', sorting: true },\r\n    { ref: 'active', label: 'Active', sorting: true },\r\n    { ref: 'recovered', label: 'Recovered', sorting: true },\r\n    { ref: 'death', label: 'Deseased', sorting: true },\r\n    { ref: 'tests', label: 'Total covid tests', sorting: true },\r\n    { ref: 'population', label: 'Population', sorting: true },\r\n    { ref: 'lastUpdated', label: 'Last Updated', sorting: true },\r\n]\r\n\r\nlet boundWorldActionCreator = null;\r\nfunction World() {\r\n    const [searchText, setSearchText] = useState('');\r\n    const worldStats = useSelector(state => state.worldStatsReducer.worldStats);\r\n    const isLoading = useSelector(state => state.worldStatsReducer.isLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    if (boundWorldActionCreator === null) {\r\n        boundWorldActionCreator = bindActionCreators(actions.worldStatasticsAction.sortStatastics, dispatch);\r\n    }\r\n    useEffect(() => {\r\n        if (worldStats.length === 0) {\r\n            dispatch(actions.worldStatasticsAction.getAllCountryStatastics());\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className='world-container'>\r\n            {\r\n                isLoading ?\r\n                    (<div>Loading world data...</div>) :\r\n                    (<div className='basic-layout'>\r\n                        <div className='search-container'>\r\n                            <span className='search-label'>search any country:</span> <input className='search-field' value={searchText} placeholder='Search for countries' onChange={(e) => { setSearchText(e.target.value); dispatch(actions.worldStatasticsAction.searchStatastics(e.target.value)) }} />\r\n                        </div>\r\n                        <WorldData headings={tableHeadings} data={worldStats} action={boundWorldActionCreator} />\r\n                    </div>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default World;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './header.scss';\r\nfunction Header() {\r\n    return (\r\n        <div className='header-container'>\r\n            <div><Link to='/homepage'>Home</Link></div>\r\n            <div><Link to='/world'>World</Link></div>\r\n            <div>Space</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './indiaStateStatus.scss';\r\n\r\nconst StateTotalCount = ({ stateData }) => {\r\n    const { state, lastupdatedtime, confirmed, active, recovered, deceased, deltaconfirmed, deltadeceased, deltarecovered } = stateData;\r\n    return (\r\n        <div className='state-total-count'>\r\n            <div className='container'>\r\n                <div className='status-grid-container'>\r\n                    <div className='state-last-upate'>\r\n                        <div className='state-name'>{state}</div>\r\n                        <div className='state-update-time'>Last updated: {lastupdatedtime}</div>\r\n                    </div>\r\n                    <div className='status-grid'>\r\n                        <div className='label-grid'>\r\n                            <div className='label-action'>Confirmed</div>\r\n                            <div className='label-right'>{deltaconfirmed}</div>\r\n                            <div className='label-right'>{confirmed}</div>\r\n                        </div>\r\n                        <div className='label-grid'>\r\n                            <div className='label-action'>Active</div>\r\n                            <div></div>\r\n                            <div className='label-right'>{active}</div>\r\n                        </div>\r\n                        <div className='label-grid'>\r\n                            <div className='label-action'>Recovered</div>\r\n                            <div className='label-right'>{deltarecovered}</div>\r\n                            <div className='label-right'>{recovered}</div>\r\n                        </div>\r\n                        <div className='label-grid'>\r\n                            <div className='label-action'>Deceased</div>\r\n                            <div className='label-right'>{deltadeceased}</div>\r\n                            <div className='label-right'>{deceased}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StateTotalCount;","import React from 'react';\r\nimport {\r\n    BarChart, Bar, Brush, ReferenceLine, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nconst BarCharts = ({ height, width, data, XDataKey, barDataKey, color }) => {\r\n    return (\r\n        <BarChart\r\n            width={width}\r\n            height={height}\r\n            data={data}\r\n            margin={{\r\n                top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey={XDataKey} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend verticalAlign=\"top\" wrapperStyle={{ lineHeight: '40px' }} />\r\n            <ReferenceLine y={0} stroke=\"#000\" />\r\n            <Brush dataKey={XDataKey} height={30} stroke=\"#8884d8\" />\r\n            <Bar dataKey={barDataKey} fill={color} />\r\n        </BarChart>\r\n    );\r\n}\r\n\r\nexport default BarCharts;","import React from 'react';\r\nimport BarCharts from '../../common-components/bar-graph';\r\nimport './stateGraph.scss';\r\n\r\nconst graphTypes = [{ type: 'confirmed', color: 'blue' }, { type: 'recovered', color: 'green' }, { type: 'deceased', color: 'grey' }, { type: 'tested', color: 'red' }]\r\nconst StateTable = ({ stateTimeSeriesData }) => {\r\n    return (\r\n        <div className='state-graph-container'>\r\n            {\r\n                graphTypes.map(graph => {\r\n                    return <div key={graph.type}>\r\n                        <BarCharts\r\n                            width={400}\r\n                            height={250}\r\n                            data={stateTimeSeriesData.stateDailyCases}\r\n                            XDataKey='date'\r\n                            barDataKey={graph.type}\r\n                            color={graph.color}\r\n                        /></div>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StateTable;","import React from 'react';\r\n\r\nconst DistrictGraph = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DistrictGraph;","import React, { useEffect, useState } from 'react';\r\nimport StateTotalCount from './stateTotalCount';\r\nimport StateTable from './stateTable';\r\nimport DistrictGraph from './districtGraph';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport action from '../../actions';\r\n\r\nconst IndiaStateCovidstatus = () => {\r\n    const [evalStateTotalCount, setEvalStateTotalCount] = useState({})\r\n    const { stateVal } = useParams();\r\n    const indiaCovidTableData = useSelector(state => state.stateTableReducer.stateTableData);\r\n    const isLoading = useSelector(state => state.stateTableReducer.isLoading);\r\n    const isLoadingTimeseriesData = useSelector(state => state.stateTableReducer.isLoadingTimeSeries);\r\n    const stateTimeSeriesData = useSelector(state => state.stateTableReducer.stateTimeseriesData);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (indiaCovidTableData.length === 0) {\r\n            dispatch(action.stateDataActions.getDistrictCovidData());\r\n        }\r\n        if (indiaCovidTableData.length > 0) {\r\n            const stateCode = indiaCovidTableData.filter(state => state.statecode === stateVal);\r\n            if (stateCode.length > 0) { // check for valid state code\r\n                setEvalStateTotalCount(stateCode[0]);\r\n            }\r\n        }\r\n\r\n    }, [indiaCovidTableData.length]);\r\n    useEffect(() => {\r\n        dispatch(action.stateDataActions.getDistrictTimeseries(stateVal));\r\n    }, []);\r\n    return (\r\n        <div>\r\n            {isLoading ? (<div>Loading State Data...</div>) :\r\n                (\r\n                    <div><StateTotalCount stateData={evalStateTotalCount} />\r\n                        <div>\r\n                            {!isLoadingTimeseriesData && <StateTable stateTimeSeriesData={stateTimeSeriesData} />}\r\n                        </div>\r\n                        <div>\r\n                            <DistrictGraph />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndiaStateCovidstatus;","import { updateLog } from '../constants';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    updateLogs: [],\r\n    error: ''\r\n}\r\n\r\nconst transformUnixTimeToUTF = (ts) => {\r\n    // convert unix timestamp to milliseconds\r\n    const ts_ms = ts * 1000;\r\n\r\n    // initialize new Date object\r\n    const date_ob = new Date(ts_ms);\r\n    return date_ob;\r\n}\r\n\r\nconst combineText = (allText, newSubstring) => {\r\n    return allText.concat(newSubstring);\r\n}\r\n\r\nconst transformLogs = (logs) => {\r\n    return logs.map(log => {\r\n        let logToShow = '';\r\n        const logArray = log.update.split(\"\\n\");\r\n        const time = transformUnixTimeToUTF(log.timestamp);\r\n        if (logArray.length > 1) {\r\n            logToShow = logArray.reduce(combineText, '');\r\n        } else {\r\n            logToShow = log.update;\r\n        }\r\n        return {\r\n            update: logToShow,\r\n            timestamp: time\r\n        };\r\n    })\r\n}\r\n\r\nconst updateLogReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case updateLog.request: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: ''\r\n            }\r\n        }\r\n        case updateLog.success: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                updateLogs: transformLogs(action.payload)\r\n            }\r\n        }\r\n        case updateLog.failure: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                updateLogs: [],\r\n                error: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default updateLogReducer;","import { stateCovidCount } from '../constants';\r\nimport compareValues from '../common-components/compare-values';\r\n\r\nconst randomId = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nconst initialState = {\r\n    isLoading: false,\r\n    stateWiseCovidCount: [],\r\n    statewiseDistrictData: [],\r\n    error: ''\r\n}\r\n\r\nconst constructStateWiseData = (districtData) => {\r\n    const tempDistrictData = [];\r\n    for (let newDistrict in districtData) {\r\n        tempDistrictData.push({\r\n            district: newDistrict,\r\n            confirmed: districtData[newDistrict].confirmed,\r\n            active: districtData[newDistrict].active,\r\n            recovered: districtData[newDistrict].recovered,\r\n            deceased: districtData[newDistrict].deceased,\r\n            deltaconfirmed: districtData[newDistrict]['delta'].confirmed,\r\n            deltadeceased: districtData[newDistrict]['delta'].deceased,\r\n            deltarecovered: districtData[newDistrict]['delta'].recovered,\r\n            key: randomId(1, 100)\r\n        });\r\n    }\r\n    // console.log(tempDistrictData);\r\n    return tempDistrictData;\r\n}\r\n\r\nconst transformIndianCovidCount = (payload, extraData) => {\r\n    const covidStateDetails = [];\r\n    let tempToalIndiaCovidCount = null;\r\n    payload.statewise.forEach(state => {\r\n        // Filter out the Total covid count of all state combined and this to last position.\r\n        if (state.state !== 'Total' && state.statecode !== 'TT') {\r\n            const distWise = extraData[state.state]\r\n            covidStateDetails.push({\r\n                confirmed: state.confirmed,\r\n                active: state.active,\r\n                recovered: state.recovered,\r\n                deceased: state.deaths,\r\n                deltaconfirmed: state.deltaconfirmed,\r\n                deltadeceased: state.deltadeaths,\r\n                deltarecovered: state.deltarecovered,\r\n                state: state.state,\r\n                statecode: state.statecode,\r\n                lastupdatedtime: state.lastupdatedtime,\r\n                districtWiseData: constructStateWiseData(distWise.districtData),\r\n                rowClickEnable: true,\r\n                key: randomId(1000, 10000),\r\n                routeLink: '/state',\r\n            })\r\n        } else {\r\n            tempToalIndiaCovidCount = {\r\n                confirmed: state.confirmed,\r\n                active: state.active,\r\n                recovered: state.recovered,\r\n                deceased: state.deaths,\r\n                deltaconfirmed: state.deltaconfirmed,\r\n                deltadeceased: state.deltadeaths,\r\n                deltarecovered: state.deltarecovered,\r\n                state: state.state,\r\n                statecode: state.statecode,\r\n                lastupdatedtime: state.lastupdatedtime,\r\n                key: randomId(1000, 10000)\r\n            }\r\n        }\r\n    });\r\n    covidStateDetails.push(tempToalIndiaCovidCount);\r\n    return covidStateDetails;\r\n}\r\n\r\nconst sortCovidCount = (indiaCovidCount, payload) => {\r\n    const { data, sortOrder } = payload;\r\n    const sortedCovidCount = JSON.parse(JSON.stringify(indiaCovidCount));\r\n    return sortedCovidCount.sort(compareValues(data, sortOrder));\r\n}\r\n\r\nconst sortDistrictCovidCount = (indiaCovidCount, payload) => {\r\n    const { data, sortOrder } = payload;\r\n    console.log(data, sortOrder);\r\n    const sortedCovidCount = JSON.parse(JSON.stringify(indiaCovidCount));\r\n    const newSortedData = sortedCovidCount.map(stateData => {\r\n        console.log(stateData);\r\n        if (stateData.state !== 'Total' && stateData.statecode !== 'TT') {\r\n            return {\r\n                ...stateData,\r\n                districtWiseData: stateData.districtWiseData.sort(compareValues(data, sortOrder))\r\n            }\r\n        }\r\n        return {\r\n            ...stateData\r\n        }\r\n    });\r\n    return newSortedData;\r\n}\r\n\r\nconst indiaCovidCountReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case stateCovidCount.request: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: ''\r\n            }\r\n        }\r\n        case stateCovidCount.success: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateWiseCovidCount: transformIndianCovidCount(action.payload, action.extraData),\r\n                statewiseDistrictData: action.extraData\r\n            }\r\n        }\r\n        case stateCovidCount.failure: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateWiseCovidCount: [],\r\n                error: action.payload\r\n            }\r\n        }\r\n        case stateCovidCount.sortSuccess: {\r\n            const tempSortCovidCount = sortCovidCount(state.stateWiseCovidCount, action.payload);\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateWiseCovidCount: [...tempSortCovidCount],\r\n                error: ''\r\n            }\r\n        }\r\n        case stateCovidCount.sortDistSuccess: {\r\n            const tempSortCovidCount = sortDistrictCovidCount(state.stateWiseCovidCount, action.payload);\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateWiseCovidCount: [...tempSortCovidCount],\r\n                error: ''\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default indiaCovidCountReducer;","const randomId = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport default randomId;","import { worldStats } from '../constants';\r\nimport randomId from '../common-components/random-number';\r\nimport compareValues from '../common-components/compare-values';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    worldStats: [],\r\n    worldStateForSearch: [],\r\n    error: ''\r\n}\r\n\r\nconst transformStats = (stats) => {\r\n    console.log(stats);\r\n    let transformedWorldData = [];\r\n    transformedWorldData = stats.response.map(data => {\r\n        return {\r\n            country: data.country,\r\n            total: data.cases.total,\r\n            active: data.cases.active,\r\n            recovered: data.cases.recovered,\r\n            death: data.deaths.total,\r\n            tests: data.tests.total,\r\n            population: data.population,\r\n            lastUpdated: data.time,\r\n            deltaactive: data.cases.new,\r\n            deltadeath: data.deaths.new,\r\n            '1mactive': data.cases['1M_pop'],\r\n            '1mdeath': data.deaths['1M_pop'],\r\n            '1mtests': data.tests['1M_pop'],\r\n            key: randomId(2000, 3000)\r\n        }\r\n    })\r\n    return transformedWorldData;\r\n}\r\n\r\nconst sortWorldStats = (worldData, payload) => {\r\n    const { data, sortOrder } = payload;\r\n    const sortedWorldStats = JSON.parse(JSON.stringify(worldData));\r\n    return sortedWorldStats.sort(compareValues(data, sortOrder));\r\n}\r\n\r\nconst searchWorldStats = (worldData, searchText) => {\r\n    console.log('asdasdadadsa');\r\n    const searchWorldStatss = JSON.parse(JSON.stringify(worldData));\r\n    const newWorldStats = searchWorldStatss.filter(stats => {\r\n        if (stats.country.toUpperCase().indexOf(searchText.toUpperCase()) >= 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    console.log(newWorldStats);\r\n    return newWorldStats;\r\n}\r\n\r\nconst worldStatsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case worldStats.request: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: ''\r\n            }\r\n        }\r\n        case worldStats.success: {\r\n            const tempWorldState = transformStats(action.payload);\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                worldStats: [...tempWorldState],\r\n                worldStateForSearch: [...tempWorldState]\r\n            }\r\n        }\r\n        case worldStats.failure: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                worldStats: [],\r\n                worldStateForSearch: [],\r\n                error: action.payload\r\n            }\r\n        }\r\n        case worldStats.sortSuccess: {\r\n            const tempSortWorldStats = sortWorldStats(state.worldStats, action.payload);\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                worldStats: [...tempSortWorldStats],\r\n                error: ''\r\n            }\r\n        }\r\n        case worldStats.searchSuccess: {\r\n            const tempSearchWorldStats = searchWorldStats(state.worldStateForSearch, action.payload);\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                worldStats: [...tempSearchWorldStats],\r\n                error: ''\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default worldStatsReducer;","import { statePageVariable } from '../constants';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    stateTableData: [],\r\n    error: '',\r\n    isLoadingTimeSeries: false,\r\n    stateTimeseriesData: { stateDailyCases: [], districtDailyCases: [] }\r\n}\r\n\r\nconst randomId = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nconst constructStateWiseData = (districtData) => {\r\n    const tempDistrictData = [];\r\n    for (let newDistrict in districtData) {\r\n        tempDistrictData.push({\r\n            district: newDistrict,\r\n            confirmed: districtData[newDistrict].confirmed,\r\n            active: districtData[newDistrict].active,\r\n            recovered: districtData[newDistrict].recovered,\r\n            deceased: districtData[newDistrict].deceased,\r\n            deltaconfirmed: districtData[newDistrict]['delta'].confirmed,\r\n            deltadeceased: districtData[newDistrict]['delta'].deceased,\r\n            deltarecovered: districtData[newDistrict]['delta'].recovered,\r\n            key: randomId(1, 100)\r\n        });\r\n    }\r\n    // console.log(tempDistrictData);\r\n    return tempDistrictData;\r\n}\r\n\r\nconst transformIndianCovidCount = (payload, extraData) => {\r\n    const covidStateDetails = [];\r\n    let tempToalIndiaCovidCount = null;\r\n    payload.statewise.forEach(state => {\r\n        // Filter out the Total covid count of all state combined and this to last position.\r\n        if (state.state !== 'Total' && state.statecode !== 'TT') {\r\n            const distWise = extraData[state.state]\r\n            covidStateDetails.push({\r\n                confirmed: state.confirmed,\r\n                active: state.active,\r\n                recovered: state.recovered,\r\n                deceased: state.deaths,\r\n                deltaconfirmed: state.deltaconfirmed,\r\n                deltadeceased: state.deltadeaths,\r\n                deltarecovered: state.deltarecovered,\r\n                state: state.state,\r\n                statecode: state.statecode,\r\n                lastupdatedtime: state.lastupdatedtime,\r\n                districtWiseData: constructStateWiseData(distWise.districtData),\r\n                rowClickEnable: true,\r\n                key: randomId(1000, 10000),\r\n                routeLink: '/state',\r\n            })\r\n        } else {\r\n            tempToalIndiaCovidCount = {\r\n                confirmed: state.confirmed,\r\n                active: state.active,\r\n                recovered: state.recovered,\r\n                deceased: state.deaths,\r\n                deltaconfirmed: state.deltaconfirmed,\r\n                deltadeceased: state.deltadeaths,\r\n                deltarecovered: state.deltarecovered,\r\n                state: state.state,\r\n                statecode: state.statecode,\r\n                lastupdatedtime: state.lastupdatedtime,\r\n                key: randomId(1000, 10000)\r\n            }\r\n        }\r\n    });\r\n    covidStateDetails.push(tempToalIndiaCovidCount);\r\n    console.log(covidStateDetails);\r\n    return covidStateDetails;\r\n}\r\n\r\nconst transformTimeSeriesData = (timeseriesData, statecode) => {\r\n    const deepCopyTimeseriesData = JSON.parse(JSON.stringify(timeseriesData));\r\n    // --------------\r\n    const tempStateDailyChanges = deepCopyTimeseriesData[statecode]['dates'];\r\n    const stateDailyChanges = [];\r\n    for (const property in tempStateDailyChanges) {\r\n        stateDailyChanges.push(\r\n            {\r\n                date: property,\r\n                confirmed: tempStateDailyChanges[property].hasOwnProperty('delta') ? tempStateDailyChanges[property]['delta']['confirmed'] || 0 : 0,\r\n                recovered: tempStateDailyChanges[property].hasOwnProperty('delta') ? tempStateDailyChanges[property]['delta']['recovered'] || 0 : 0,\r\n                deceased: tempStateDailyChanges[property].hasOwnProperty('delta') ? tempStateDailyChanges[property]['delta']['deceased'] || 0 : 0,\r\n                tested: tempStateDailyChanges[property].hasOwnProperty('delta') ? tempStateDailyChanges[property]['delta']['tested'] || 0 : 0,\r\n            }\r\n        )\r\n    }\r\n    // --------------\r\n    const tempDistrictDailyChanges = deepCopyTimeseriesData[statecode]['districts'];\r\n    const districtDailyChanges = [];\r\n    for (const property in tempDistrictDailyChanges) {\r\n        const district = tempDistrictDailyChanges[property]['dates'];\r\n        const districtDaily = [];\r\n        for (const districtDate in district) {\r\n            districtDaily.push(\r\n                {\r\n                    date: districtDate,\r\n                    confirmed: district[districtDate].hasOwnProperty('delta') ? district[districtDate]['delta']['confirmed'] || 0 : 0,\r\n                    recovered: district[districtDate].hasOwnProperty('delta') ? district[districtDate]['delta']['recovered'] || 0 : 0,\r\n                    deceased: district[districtDate].hasOwnProperty('delta') ? district[districtDate]['delta']['deceased'] || 0 : 0,\r\n                    tested: district[districtDate].hasOwnProperty('delta') ? district[districtDate]['delta']['tested'] || 0 : 0,\r\n                }\r\n            )\r\n        }\r\n        districtDailyChanges.push(\r\n            {\r\n                name: property,\r\n                dailyChanges: districtDaily\r\n            }\r\n        );\r\n    }\r\n    return { stateDailyCases: stateDailyChanges, districtDailyCases: districtDailyChanges };\r\n}\r\n\r\nconst stateTableReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case statePageVariable.request: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: ''\r\n            }\r\n        }\r\n        case statePageVariable.success: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateTableData: transformIndianCovidCount(action.payload, action.extraData),\r\n            }\r\n        }\r\n        case statePageVariable.failure: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                stateTableData: [],\r\n                error: action.payload\r\n            }\r\n        }\r\n        case statePageVariable.timeseriesRequest: {\r\n            return {\r\n                ...state,\r\n                isLoadingTimeSeries: true,\r\n                errorTimeSeries: ''\r\n            }\r\n        }\r\n        case statePageVariable.timeseriesSuccess: {\r\n            return {\r\n                ...state,\r\n                isLoadingTimeSeries: false,\r\n                stateTimeseriesData: transformTimeSeriesData(action.payload, action.statecode),\r\n            }\r\n        }\r\n        case statePageVariable.timeseriesFailure: {\r\n            return {\r\n                ...state,\r\n                isLoadingTimeSeries: false,\r\n                stateTimeseriesData: {},\r\n                errorTimeSeries: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default stateTableReducer;","import { combineReducers } from 'redux';\r\n\r\nimport updateLogReducer from './updateLogReducer';\r\nimport indiaCovidCountReducer from './indiaCovidCountReducer';\r\nimport worldStatsReducer from './worldStatasticsReducer';\r\nimport stateTableReducer from './stateTableReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    updateLogReducer,\r\n    indiaCovidCountReducer,\r\n    worldStatsReducer,\r\n    stateTableReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './reducers';\r\n\r\n// use applyMiddleware to add the thunk middleware to the store\r\nconst middleware = applyMiddleware(thunk,logger);\r\n\r\nconst store = createStore(rootReducer, middleware)\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport App from './App';\r\nimport World from './containers/world';\r\nimport Header from './components/Header';\r\nimport IndiaStateCovidstatus from './containers/india-state-status';\r\nimport store from './storeSetUp';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './app.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router basename='/covid-tracker-world'>\r\n        <div>\r\n          <Header />\r\n          <div className='not-official-sign'>THIS IS NOT THE OFFICIAL WEBSITE</div>\r\n          <Route exact path='/'>\r\n            <Redirect from='/' to=\"/homepage\" />\r\n          </Route>\r\n          <Route path='/homepage' component={App}></Route>\r\n          <Route path='/world' component={World}></Route>\r\n          <Route path='/state/:stateVal' component={IndiaStateCovidstatus}></Route>\r\n        </div>\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}